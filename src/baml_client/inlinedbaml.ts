/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n// Custom OpenAI-generic client for Moondream\n// client<llm> MoondreamClient {\n//   provider \"openai-generic\"\n//   options {\n//     base_url \"https://api.moondream.ai/v1\"\n//     model \"moondream-2B\"\n//     api_key env.MOONDREAM_API_KEY\n//     supports_streaming false\n//   }\n// }\n\nclient<llm> GeminiClient {\n  provider vertex-ai\n  options {\n    model \"gemini-2.0-flash-001\"\n    location us-west1\n  }\n}\n\n",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.75.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "test.baml": "\nclass Resume {\n  name string\n  education Education[] @description(\"Extract in the same order listed\")\n  skills string[] @description(\"Only include programming languages\")\n}\n\nclass Education {\n  school string\n  degree string\n  year int\n}\n\nfunction ExtractResume(resume_text: string) -> Resume {\n  // see clients.baml\n  client GeminiClient\n\n  // The prompt uses Jinja syntax. Change the models or this text and watch the prompt preview change!\n  prompt #\"\n    Parse the following resume and return a structured representation of the data in the schema below.\n\n    Resume:\n    ---\n    {{ resume_text }}\n    ---\n\n    {# special macro to print the output instructions. #}\n    {{ ctx.output_format }}\n\n    JSON:\n  \"#\n}\n\ntest Test1 {\n  functions [ExtractResume]\n  args {\n    resume_text #\"\n      John Doe\n\n      Education\n      - University of California, Berkeley\n        - B.S. in Computer Science\n        - 2020\n\n      Skills\n      - Python\n      - Java\n      - C++\n    \"#\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}